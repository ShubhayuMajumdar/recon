//Knapsack Problem
#include<stdio.h>
#include<stdlib.h>

// Returns the maximum value that
// can be put in a knapsack of capacity W
void knapsack_func(int n, float weight[], float profit[], float capacity) 
{
    float x[20], tp = 0;
    int i, j, u;
    u = capacity;
 
    for (i = 0; i < n; i++)
        x[i] = 0.0;
 
    for (i = 0; i < n; i++) 
    {
        if (weight[i] > u)
            break;
        else 
        {
            x[i] = 1.0;
            tp = tp + profit[i];
            u = u - weight[i];
        }
    }
    if (i < n)
    x[i] = u / weight[i];
 
    tp = tp + (x[i] * profit[i]);
    printf("\nThe result vector is:\n");
    for (i = 0; i < n; i++)
    {
        printf("%f \t", x[i]);
    }
    printf("\nMaximum profit is: %f", tp);
}

//Driver Function
int main() 
{
    float weight[200], profit[200], capacity;
    int num, i, j;
    float ratio[200], temp;
 
    printf("\nEnter the no. of objects: ");
    scanf("%d", &num);
 
    printf("\nEnter the weights of each object:\n");
    for (i = 0; i < num; i++)
    {
        scanf("%f", &weight[i]);
    }
    printf("\nEnter the profits of each object:\n");
    for (i = 0; i < num; i++)
    {
        scanf("%f",&profit[i]);
    }
    // If weight of the nth item is more
    // than Knapsack capacity W, then
    // this item cannot be included
    // in the optimal solution
    
    printf("\nEnter the capacity of knapsack:\n");
    scanf("%f", &capacity);
    for (i = 0; i < num; i++) 
    {
      ratio[i] = profit[i] / weight[i];
    }
 
    for (i = 0; i < num; i++) 
    {
        for (j = i + 1; j < num; j++) 
        {
            if (ratio[i] < ratio[j]) 
            {
                temp = ratio[j];
                ratio[j] = ratio[i];
                ratio[i] = temp;
 
                temp = weight[j];
                weight[j] = weight[i];
                weight[i] = temp;
 
                temp = profit[j];
                profit[j] = profit[i];
                profit[i] = temp;
            }
        }
    }
    knapsack_func(num, weight, profit, capacity);
    return(0);
}
